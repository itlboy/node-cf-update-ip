require('dotenv').config();
const axios = require('axios');

const CLOUDFLARE_API_URL = "https://api.cloudflare.com/client/v4/zones";
const ZONE_ID = process.env.CF_ZONE_ID;
const API_TOKEN = process.env.CF_API_TOKEN;
const RECORD_NAME = process.env.CF_RECORD_NAME;

// L·∫•y IP public t·ª´ d·ªãch v·ª• b√™n ngo√†i
async function getPublicIP() {
    try {
        const res = await axios.get('https://api64.ipify.org?format=json');
        return res.data.ip;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y IP Public:", error.message);
        return null;
    }
}

// L·∫•y th√¥ng tin b·∫£n ghi DNS t·ª´ Cloudflare
async function getDNSRecord() {
    try {
        const response = await axios.get(`${CLOUDFLARE_API_URL}/${ZONE_ID}/dns_records`, {
            headers: { Authorization: `Bearer ${API_TOKEN}` },
            params: { name: RECORD_NAME }
        });

        if (response.data.success && response.data.result.length > 0) {
            return response.data.result[0];
        } else {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi DNS!");
            return null;
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y DNS Record:", error.response?.data || error.message);
        return null;
    }
}

// C·∫≠p nh·∫≠t b·∫£n ghi DNS tr√™n Cloudflare
async function updateDNSRecord(recordId, ip) {
    try {
        const response = await axios.put(
            `${CLOUDFLARE_API_URL}/${ZONE_ID}/dns_records/${recordId}`,
            {
                type: "A",
                name: RECORD_NAME,
                content: ip,
                ttl: 120, // 2 ph√∫t
                proxied: false
            },
            { headers: { Authorization: `Bearer ${API_TOKEN}` } }
        );

        if (response.data.success) {
            console.log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng IP ${ip} cho ${RECORD_NAME}`);
        } else {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t DNS:", response.data.errors);
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t DNS:", error.response?.data || error.message);
    }
}

// H√†m ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t IP
async function updateIP() {
    console.log("üîÑ ƒêang ki·ªÉm tra IP...");
    const ip = await getPublicIP();
    if (!ip) return;

    const record = await getDNSRecord();
    if (!record) return;

    if (record.content !== ip) {
        console.log(`üîÑ IP thay ƒë·ªïi t·ª´ ${record.content} ‚Üí ${ip}, c·∫≠p nh·∫≠t l√™n Cloudflare...`);
        await updateDNSRecord(record.id, ip);
    } else {
        console.log(`‚úÖ IP kh√¥ng thay ƒë·ªïi (${ip}), kh√¥ng c·∫ßn c·∫≠p nh·∫≠t.`);
    }
}

// Ch·∫°y ngay v√† l·∫∑p l·∫°i m·ªói 5 ph√∫t
updateIP();
setInterval(updateIP, 5 * 60 * 1000);
